[tool.poetry]
authors = ["admin <admin@example.com>"]
description = "FastAPI project generated using minimal-fastapi-postgres-template."
name = "app"
version = "0.1.0-alpha"

[tool.poetry.dependencies]
python = "^3.12"

alembic = "^1.13.1"
asyncpg = "^0.29.0"
bcrypt = "^4.1.2"
fastapi = "^0.110.0"
pydantic = {extras = ["dotenv", "email"], version = "^2.6.4"}
pydantic-settings = "^2.2.1"
pyjwt = "^2.8.0"
python-multipart = "^0.0.9"
sqlalchemy = "^2.0.28"
python-jose = "^3.3.0"

[tool.poetry.group.dev.dependencies]
coverage = "^7.4.4"
freezegun = "^1.4.0"
gevent = "^24.2.1"
httpx = "^0.27.0"
mypy = "^1.9.0"
pre-commit = "^3.6.2"
pytest = "^8.1.1"
# do not bump pytest-asyncio until https://github.com/pytest-dev/pytest-asyncio/issues/706 resolved
pytest-asyncio = "0.21.1"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.5.0"
ruff = "^0.3.3"
types-passlib = "^1.7.7.20240311"
uvicorn = {extras = ["standard"], version = "^0.28.0"}
taskipy = "^1.12.2"
blue = "^0.9.1"
isort = "^5.13.2"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]

[tool.pytest.ini_options]
addopts = "-vv -n auto --cov --cov-report xml --cov-report term-missing --cov-fail-under=100"
asyncio_mode = "auto"
testpaths = ["app/tests"]

[tool.coverage.run]
concurrency = ["gevent"]
omit = ["app/tests/*"]
source = ["app"]

[tool.mypy]
python_version = "3.12"
strict = true

[tool.ruff]
line-length = 79
exclude = ['.venv', 'migrations']
target-version = "py312"

[tool.ruff.lint]
# pycodestyle, pyflakes, isort, pylint, pyupgrade
ignore = ["E501"]
select = ["E", "F", "I", "PL", "UP", "W"]

[tool.isort]
profile = "black"
line_length = 79
extend_skip = ['migrations']

[tool.blue]
extend-exclude = '(migrations/)'


[tool.taskipy.tasks]
lint = 'ruff . && blue --check . --diff && isort --check . --diff'
format = 'blue .  && isort .'
run = 'uvicorn app.main:app --reloadtask'
pre_test = 'task lint'
test = 'pytest -s -x --cov=fast_zero -vv'
post_test = 'coverage html'